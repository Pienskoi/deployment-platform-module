controller:
  JCasC:
    configScripts:
      jobs: |
        jobs:
          - script: >
              multibranchPipelineJob('build-pipeline') {
                branchSources {
                  github {
                    id('1')
                    repoOwner('Pienskoi')
                    repository('DevOpsProject')
                    includes('main develop PR-*')
                    buildForkPRMerge(true)
                    buildOriginBranch(true)
                    buildOriginBranchWithPR(true)
                    buildOriginPRMerge(true)                     
                  }
                }

                factory {
                  workflowBranchProjectFactory {
                    scriptPath('jenkins/build.jenkinsfile')
                  }
                }
              }

          - script: >
              pipelineJob('deploy-pipeline') {
                definition {
                  cpsScm {
                    lightweight(true)
                    scm {
                      github('Pienskoi/DevOpsProject', 'main')  
                    }
                    scriptPath('jenkins/deploy.jenkinsfile')
                  }
                }

                parameters {
                  choice {
                    name('ENV_NAME')
                    description('Pick env name')
                    choices(['CI', 'QA'])
                  }
                  activeChoiceParam('DOCKER_IMAGE') {
                    choiceType('SINGLE_SELECT')
                    description('Pick version number to deploy')
                    groovyScript {
                      fallbackScript('return ["ERROR"]')
                      script("""
                        import groovy.json.JsonSlurper
                        import jenkins.model.*
                        
                        def registry_url = "docker-registry.project.com"
                        def image = "spring-petclinic"
                        def registry_credentials = com.cloudbees.plugins.credentials.CredentialsProvider.lookupCredentials(
                          com.cloudbees.plugins.credentials.impl.UsernamePasswordCredentialsImpl, Jenkins.instance, null, null ).find{
                            it.id == "registry-credentials"}
                        
                        def command = "curl -s -u \$registry_credentials.username:\$registry_credentials.password https://\$registry_url/v2/\$image/tags/list"
                        def proc = command.execute()
                        proc.waitFor()              
                        def curl_output = proc.in.text
                        
                        def jsonSlurper = new JsonSlurper()
                        def json_output = jsonSlurper.parseText(curl_output)
                        def tags_list = []
                        
                        for(tag in json_output['tags']) {
                          def full_image = "\$registry_url/\$image:\$tag"
                          if(tag == "latest") {
                            full_image += ":selected"
                          }
                          tags_list.push(full_image)
                        }
                        
                        return tags_list
                      """.stripIndent().trim())
                    }
                  }
                }
              }
