controller:
  JCasC:
    configScripts:
      script-security: |
        security:
          globaljobdslsecurityconfiguration:
            useScriptSecurity: false
      jobs: |
        jobs:
          - script: >
              job('build-job') {
                label('ansible')

                scm {
                  github('Pienskoi/DevOpsProject', 'main')  
                }

                wrappers {
                  credentialsBinding {
                    string('PROJECT_ID', 'project-id')
                    file('ANSIBLE_SA_KEY', 'ansible-service-account')
                    usernamePassword('REGISTRY_USERNAME', 'REGISTRY_PASSWORD', 'registry-credentials')
                  }
                }

                steps {
                  shell {
                    command('sed -i -e "s;PROJECT_ID;$PROJECT_ID;" -e "s;ANSIBLE_SA_KEY_PATH;$ANSIBLE_SA_KEY;" ./ansible/inventory.gcp.yml')
                  }
                  ansiblePlaybookBuilder {
                    playbook('./ansible/build.yml')
                    inventory {
                      inventoryPath {
                        path('./ansible/inventory.gcp.yml')
                      }
                    }
                    credentialsId('ansible-ssh-key')
                    disableHostKeyChecking(true)
                    extraVars {
                      extraVar {
                        hidden(false)
                        key('work_dir')
                        value('$WORKSPACE/')
                      }
                      extraVar {
                        hidden(false)
                        key('image_tag')
                        value('$BUILD_NUMBER')
                      }
                      extraVar {
                        hidden(true)
                        key('registry_username')
                        value('$REGISTRY_USERNAME')
                      }
                      extraVar {
                        hidden(true)
                        key('registry_password')
                        value('$REGISTRY_PASSWORD')
                      }
                    }
                  }
                }
              }

          - script: >
              job('deploy-job') {
                label('ansible')

                scm {
                  github('Pienskoi/DevOpsProject', 'main')  
                }

                wrappers {
                  credentialsBinding {
                    file('ANSIBLE_SA_KEY', 'ansible-service-account')
                    file('GKE_SA_KEY', 'gke-service-account')
                    string('LOCATION', 'cluster-location')
                    string('PROJECT_ID', 'project-id')
                    string('CI_CLUSTER_NAME', 'ci-cluster-name')
                    string('QA_CLUSTER_NAME', 'qa-cluster-name')
                    string('MYSQL_DATABASE', 'mysql-database')
                    string('MYSQL_USERNAME', 'mysql-username')
                    string('MYSQL_PASSWORD', 'mysql-password')
                    string('MYSQL_CONNECTION', 'mysql-connection-name')
                    string('MYSQL_SA', 'mysql-service-account')
                  }
                }

                parameters {
                  choice {
                    name('ENV_NAME')
                    description('Pick env name')
                    choices(['CI', 'QA'])
                  }
                  activeChoiceParam('DOCKER_IMAGE') {
                    choiceType('SINGLE_SELECT')
                    description('Pick version number to deploy')
                    groovyScript {
                      fallbackScript('return ["ERROR"]')
                      script("""
                        import groovy.json.JsonSlurper
                        import jenkins.model.*
                        
                        def registry_url = "docker-registry.project.com"
                        def image = "spring-petclinic"
                        def registry_credentials = com.cloudbees.plugins.credentials.CredentialsProvider.lookupCredentials(
                          com.cloudbees.plugins.credentials.impl.UsernamePasswordCredentialsImpl, Jenkins.instance, null, null ).find{
                            it.id == "registry-credentials"}
                        
                        def command = "curl -s -u \$registry_credentials.username:\$registry_credentials.password https://\$registry_url/v2/\$image/tags/list"
                        def proc = command.execute()
                        proc.waitFor()              
                        def curl_output = proc.in.text
                        
                        def jsonSlurper = new JsonSlurper()
                        def json_output = jsonSlurper.parseText(curl_output)
                        def tags_list = []
                        
                        for(tag in json_output['tags']) {
                          def full_image = "\$registry_url/\$image:\$tag"
                          if(tag == "latest") {
                            full_image += ":selected"
                          }
                          tags_list.push(full_image)
                        }
                        
                        return tags_list
                      """.stripIndent().trim())
                    }
                  }
                }

                steps {
                  shell {
                    command('sed -i -e "s;PROJECT_ID;$PROJECT_ID;" -e "s;ANSIBLE_SA_KEY_PATH;$ANSIBLE_SA_KEY;" ./ansible/inventory.gcp.yml')
                  }
                  ansiblePlaybookBuilder {
                    playbook('./ansible/deploy.yml')
                    inventory {
                      inventoryPath {
                        path('./ansible/inventory.gcp.yml') 
                      }
                    }
                    credentialsId('ansible-ssh-key')
                    disableHostKeyChecking(true)
                    extraVars {
                      extraVar {
                        hidden(false)
                        key('work_dir')
                        value('$WORKSPACE/')
                      }
                      extraVar {
                        hidden(true)
                        key('service_account_key_path')
                        value('$GKE_SA_KEY')
                      }
                      extraVar {
                        hidden(true)
                        key('location')
                        value('$LOCATION')
                      }
                      extraVar {
                        hidden(true)
                        key('project_id')
                        value('$PROJECT_ID')
                      }
                      extraVar {
                        hidden(false)
                        key('ci_cluster_name')
                        value('$CI_CLUSTER_NAME')
                      }
                      extraVar {
                        hidden(false)
                        key('qa_cluster_name')
                        value('$QA_CLUSTER_NAME')
                      }
                      extraVar {
                        hidden(false)
                        key('env_name')
                        value('$ENV_NAME')
                      }
                      extraVar {
                        hidden(false)
                        key('image')
                        value('$DOCKER_IMAGE')
                      }
                      extraVar {
                        hidden(true)
                        key('mysql_database')
                        value('$MYSQL_DATABASE')
                      }
                      extraVar {
                        hidden(true)
                        key('mysql_username')
                        value('$MYSQL_USERNAME')
                      }
                      extraVar {
                        hidden(true)
                        key('mysql_password')
                        value('$MYSQL_PASSWORD')
                      }
                      extraVar {
                        hidden(true)
                        key('mysql_connection_name')
                        value('$MYSQL_CONNECTION')
                      }
                      extraVar {
                        hidden(true)
                        key('mysql_service_account')
                        value('$MYSQL_SA')
                      }
                      extraVar {
                        hidden(false)
                        key('domain')
                        value('$DOMAIN')
                      }
                    }
                  }
                }
              }

          - script: >
              pipelineJob('build-pipeline') {
                definition {
                  cpsScm {
                    lightweight(true)
                    scm {
                      github('Pienskoi/DevOpsProject', 'main')  
                    }
                    scriptPath('jenkins/build.jenkinsfile')
                  }
                }

                triggers {
                  GenericTrigger {
                    genericVariables {
                      genericVariable {
                        key('ref')
                        value('$.ref')
                        defaultValue('')
                      }
                      genericVariable {
                        key('action')
                        value('$.action')
                        defaultValue('')
                      }
                    }
                    causeString('Triggered on $ref$action')
                    regexpFilterText('$ref$action')
                    regexpFilterExpression('^(refs/heads/(main|develop)|opened|reopened|synchronize)$')
                  }
                }
              }

          - script: >
              pipelineJob('deploy-pipeline') {
                definition {
                  cpsScm {
                    lightweight(true)
                    scm {
                      github('Pienskoi/DevOpsProject', 'main')  
                    }
                    scriptPath('jenkins/deploy.jenkinsfile')
                  }
                }

                parameters {
                  choice {
                    name('ENV_NAME')
                    description('Pick env name')
                    choices(['CI', 'QA'])
                  }
                  activeChoiceParam('DOCKER_IMAGE') {
                    choiceType('SINGLE_SELECT')
                    description('Pick version number to deploy')
                    groovyScript {
                      fallbackScript('return ["ERROR"]')
                      script("""
                        import groovy.json.JsonSlurper
                        import jenkins.model.*
                        
                        def registry_url = "docker-registry.project.com"
                        def image = "spring-petclinic"
                        def registry_credentials = com.cloudbees.plugins.credentials.CredentialsProvider.lookupCredentials(
                          com.cloudbees.plugins.credentials.impl.UsernamePasswordCredentialsImpl, Jenkins.instance, null, null ).find{
                            it.id == "registry-credentials"}
                        
                        def command = "curl -s -u \$registry_credentials.username:\$registry_credentials.password https://\$registry_url/v2/\$image/tags/list"
                        def proc = command.execute()
                        proc.waitFor()              
                        def curl_output = proc.in.text
                        
                        def jsonSlurper = new JsonSlurper()
                        def json_output = jsonSlurper.parseText(curl_output)
                        def tags_list = []
                        
                        for(tag in json_output['tags']) {
                          def full_image = "\$registry_url/\$image:\$tag"
                          if(tag == "latest") {
                            full_image += ":selected"
                          }
                          tags_list.push(full_image)
                        }
                        
                        return tags_list
                      """.stripIndent().trim())
                    }
                  }
                }
              }
