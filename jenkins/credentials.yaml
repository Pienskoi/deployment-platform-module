controller:
  additionalExistingSecrets:
  - name: registry-credentials
    keyName: username
  - name: registry-credentials
    keyName: password
  - name: ansible-ssh
    keyName: username
  - name: ansible-ssh
    keyName: key
  - name: ansible-service-account
    keyName: key
  - name: gke-service-account
    keyName: key
  - name: cluster-details
    keyName: location
  - name: cluster-details
    keyName: project-id
  - name: cluster-details
    keyName: ci-cluster-name
  - name: cluster-details
    keyName: qa-cluster-name
  - name: mysql-credentials
    keyName: host
  - name: mysql-credentials
    keyName: database
  - name: mysql-credentials
    keyName: username
  - name: mysql-credentials
    keyName: password
  - name: mysql-credentials
    keyName: connection-name
  - name: mysql-credentials
    keyName: sa-name
  
  JCasC:
    configScripts:
      credentials: |
        credentials:
          system:
            domainCredentials:
              - credentials:
                - usernamePassword:
                    scope: GLOBAL
                    id: "registry-credentials"
                    username: "${registry-credentials-username}"
                    password: "${registry-credentials-password}"
                    description: "Username/Password Credentials for Docker registry"
                - basicSSHUserPrivateKey:
                    scope: GLOBAL
                    id: "ansible-ssh-key"
                    username: "${ansible-ssh-username}"
                    description: "SSH key for connecting to Ansible workers"
                    privateKeySource:
                      directEntry:
                        privateKey: "${ansible-ssh-key}"
                - file:
                    scope: GLOBAL
                    id: "ansible-service-account"
                    fileName: "ansible-sa-key.json"
                    secretBytes: "${base64:${ansible-service-account-key}}"
                    description: "GCP Service account key for connecting to Ansible workers"
                - file:
                    scope: GLOBAL
                    id: "gke-service-account"
                    fileName: "gke-sa-key.json"
                    secretBytes: "${base64:${gke-service-account-key}}"
                    description: "GCP Service account key for deploying application to GKE"
                - string:
                    scope: GLOBAL
                    id: "cluster-location"
                    secret: "${cluster-details-location}"
                    description: "Location of GKE application clusters"
                - string:
                    scope: GLOBAL
                    id: "project-id"
                    secret: "${cluster-details-project-id}"
                    description: "GCP Project ID"
                - string:
                    scope: GLOBAL
                    id: "ci-cluster-name"
                    secret: "${cluster-details-ci-cluster-name}"
                    description: "Name of CI environment GKE cluster"
                - string:
                    scope: GLOBAL
                    id: "qa-cluster-name"
                    secret: "${cluster-details-qa-cluster-name}"
                    description: "Name of QA environment GKE cluster"
                - string:
                    scope: GLOBAL
                    id: "mysql-database"
                    secret: "${mysql-credentials-database}"
                    description: "MySQL application database name"
                - string:
                    scope: GLOBAL
                    id: "mysql-username"
                    secret: "${mysql-credentials-username}"
                    description: "User name for connecting to MySQL database"
                - string:
                    scope: GLOBAL
                    id: "mysql-password"
                    secret: "${mysql-credentials-password}"
                    description: "User password for connecting to MySQL database"
                - string:
                    scope: GLOBAL
                    id: "mysql-connection-name"
                    secret: "${mysql-credentials-connection-name}"
                    description: "Cloud SQL Connection name for connecting to MySQL database"
                - string:
                    scope: GLOBAL
                    id: "mysql-sa-name"
                    secret: "${mysql-credentials-sa-name}"
                    description: "Kubernetes service account for connecting to MySQL by Cloud SQL Auth Proxy"
                  