#!/bin/bash

# Provide next arguments in KEY=VALUE style:
# 
# PROJECT_ID - GCP Project ID
# REGION - Region where all regional resources will bedeployed
# ZONE - Zone where all zonal resiurces will be deployed
# CLUSTER - Name of GKE cluster 
# SQL_DATABASE - Spring-petclinic database name
# SQL_USERNAME - Username for connecting to spring-petclinic database
# SQL_PASSWORD - Password for connecting to spring-petclinic database
# DOMAIN - Global domain name for spring-petclinic CI environment

KEYS=(
  "PROJECT_ID"
  "REGION"
  "ZONE"
  "CLUSTER"
  "SQL_DATABASE"
  "SQL_USERNAME"
  "SQL_PASSWORD"
  "DOMAIN"
)
for ARGUMENT in "$@"; do
  KEY="$(echo "${ARGUMENT}" | cut -f1 -d=)"

  KEY_LENGTH=${#KEY}
  VALUE="${ARGUMENT:${KEY_LENGTH}+1}"

  declare "${KEY}"="${VALUE}"
done
for KEY in "${KEYS[@]}"; do
  if [ -z ${!KEY+x} ]; then 
    printf "${KEY}: "
    read "${KEY}"
  fi
done

ACCOUNT="$(gcloud config get account)"
gcloud config set project "${PROJECT_ID}"
gcloud services enable \
  compute.googleapis.com \
  container.googleapis.com \
  storage-api.googleapis.com \
  sqladmin.googleapis.com \
  servicenetworking.googleapis.com \
  cloudresourcemanager.googleapis.com \
  iam.googleapis.com \
  dns.googleapis.com \
  cloudbuild.googleapis.com \
  containerregistry.googleapis.com \
  artifactregistry.googleapis.com \
  secretmanager.googleapis.com

read -p "GitHub repository is connected to Cloud Build? Enter 'yes' to continue: " -r reply
echo
if [[ "${reply}" != "yes" ]]; then
  exit 1
fi

mkdir build
openssl req -new -sha256 -nodes -newkey rsa:2048 \
  -subj "/C=UA/CN=ProjectCA" \
  -keyout ./build/ProjectCA.key \
  -out ./build/ProjectCA.csr
openssl x509 -req -sha256 -in ./build/ProjectCA.csr \
  -signkey ./build/ProjectCA.key \
  -days 365 -out ./build/ProjectCA.crt
openssl genrsa -out ./build/project.com.key 2048
cp /etc/ssl/openssl.cnf ./build/openssl.cnf
cat <<EOF >> ./build/openssl.cnf
[ SAN ]
subjectAltName=DNS:*.project.com
EOF
openssl req -new -sha256 -key ./build/project.com.key \
  -subj "/C=UA/O=Project/CN=*.project.com" -reqexts SAN \
  -config ./build/openssl.cnf \
  -out ./build/project.com.csr
openssl x509 -req -in ./build/project.com.csr \
  -CA ./build/ProjectCA.crt \
  -CAkey ./build/ProjectCA.key \
  -CAcreateserial \
  -out ./build/project.com.crt \
  -days 500 -sha256 -extfile <(echo "subjectAltName=DNS:*.project.com")
gcloud compute ssl-certificates create project-cert \
  --certificate ./build/project.com.crt \
  --private-key ./build/project.com.key \
  --region "${REGION}"  
sudo cp ./build/ProjectCA.crt /usr/local/share/ca-certificates/ProjectCA.crt
sudo update-ca-certificates

cd ./terraform
terraform init
cat <<EOF > terraform.tfvars
project_id        = "${PROJECT_ID}"
region            = "${REGION}"
zone              = "${ZONE}"
gke_cluster_name  = "${CLUSTER}"
sql_database_name = "${SQL_DATABASE}"
sql_user_name     = "${SQL_USERNAME}"
sql_user_password = "${SQL_PASSWORD}"
domain            = "${DOMAIN}"
EOF
terraform plan -out ../build/tfplan
terraform apply ../build/tfplan

WIREGUARD_IP="$(terraform output -raw wireguard_server_public_ip)"
SQL_CONNECTION="$(terraform output -raw sql_connection_name)"
SQL_SA="$(terraform output -raw sql_service_account)"
NAMESERVERS="$(terraform output dns_name_servers)"

terraform output -raw os_login_sa_key > ../build/os-login-sa.json

cd ..
ssh-keygen -f ./build/os-login-ssh-key -N ""
gcloud auth activate-service-account --key-file ./build/os-login-sa.json
gcloud compute os-login ssh-keys add --key-file=./build/os-login-ssh-key.pub
gcloud config set account "${ACCOUNT}"

ssh-keygen -F "${WIREGUARD_IP}" || ssh-keyscan "${WIREGUARD_IP}" >> ~/.ssh/known_hosts
cat <<EOF > ./build/wg0-client.conf
[Interface]
Address = 10.0.10.2/32
PrivateKey = $(ssh -i ./build/os-login-ssh-key ${OS_LOGIN_USERNAME}@${WIREGUARD_IP} "sudo cat /etc/wireguard/client-private.key")
DNS = $(gcloud compute addresses list --filter='purpose:DNS_RESOLVER AND subnetwork:project-subnet' --format='get(address)')
MTU = 1380

[Peer]
PublicKey = $(ssh -i ./build/os-login-ssh-key ${OS_LOGIN_USERNAME}@${WIREGUARD_IP} "sudo cat /etc/wireguard/server-public.key")
Endpoint = ${WIREGUARD_IP}:51820
AllowedIPs = 10.0.10.0/24, 10.10.10.0/24, 10.0.0.0/28
PersistentKeepalive = 21
EOF
sudo wg-quick up ./build/wg0-client.conf

git clone https://github.com/GoogleCloudPlatform/cloud-builders-community
cd ./cloud-builders-community/helm
gcloud builds submit . --config=cloudbuild.yaml --substitutions _HELM_VERSION=3.8.0
cd -

echo "Add nameservers to domain config:
${NAMESERVERS}"
