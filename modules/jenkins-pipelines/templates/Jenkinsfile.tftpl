pipeline {
  agent {
    kubernetes {
      defaultContainer 'agent'
      yaml '''
        apiVersion: v1
        kind: Pod
        spec:
          containers:
          - name: agent
            image: ghcr.io/pienskoi/jenkins-agent:1.0.0
            command:
            - sleep
            args:
            - 99d
            tty: true
            volumeMounts:
            - name: dockersock
              mountPath: /var/run/docker.sock
          volumes:
          - name: dockersock
            hostPath:
              path: /var/run/docker.sock
          serviceAccountName: jenkins-agent
      '''
    }
  }

  triggers {
    githubPush()
  }

  environment {
    REGISTRY_HOST='${registry_host}'
    IMAGE='${registry_host}/${project_id}/${repository}/${service_name}'
    CLUSTER_NAME='${cluster_name}'
    CLUSTER_LOCATION='${cluster_location}'
    PROJECT_ID='${project_id}'
    PROD_NAMESPACE='${prod_namespace}'
    DEV_NAMESPACE='${dev_namespace}'
    SERVICE_NAME='${service_name}'
    CHART_PATH='oci://ghcr.io/pienskoi/service-chart'
  }
  
  stages {
    stage('Authenticate to Artifact Registry') {
      steps {
        sh 'gcloud auth configure-docker $REGISTRY_HOST --quiet'
      }
    }

    stage('Build image') {
      steps {
        configFileProvider([configFile(fileId: '${service_type}-dockerfile', variable: 'DOCKERFILE')]) {
          sh 'docker build -t $IMAGE:$BUILD_NUMBER -t $IMAGE:latest -f $DOCKERFILE .'
        }
      }
    }

    stage('Tag image') {
      when {
        expression { BRANCH_NAME == 'main' }
      }
      steps {
        sh 'docker tag $IMAGE:$BUILD_NUMBER $IMAGE:latest'
      }
    }

    stage('Push image') {
      steps {
        sh 'docker push $IMAGE --all-tags'
      }
    }

    stage('Get cluster credentials') {
      steps {
        sh 'gcloud container clusters get-credentials $CLUSTER_NAME --location $CLUSTER_LOCATION --project $PROJECT_ID'
      }
    }

    stage('Deploy to Production environment') {
      when {
        expression { BRANCH_NAME == 'main' }
      }
      steps {
        configFileProvider([configFile(fileId: '${service_name}-prod-values', variable: 'VALUES_FILE')]) {
          sh 'helm upgrade --install $SERVICE_NAME $CHART_PATH -f $VALUES_FILE --namespace $PROD_NAMESPACE'
        }
      }
    }

    stage('Deploy to Development environment') {
      when {
        expression { BRANCH_NAME != 'main' }
      }
      steps {
        configFileProvider([configFile(fileId: '${service_name}-dev-values', variable: 'VALUES_FILE')]) {
          sh 'helm upgrade --install $SERVICE_NAME $CHART_PATH -f $VALUES_FILE --namespace $DEV_NAMESPACE'
        }
      }
    }
  }
}
